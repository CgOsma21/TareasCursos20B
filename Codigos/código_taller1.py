# -*- coding: utf-8 -*-
"""Taller 1 Métodos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hJYbDaiTr_7Oc3hB-hU-a96ZZQAS5omt

# Problema 3 sección 1.1.6

Los vértices de un triángulo ABC tienen como vectores posición a, b y c, respectivamente, y relativos a un origen común O. Demuestre que el vector posición g del centroide G del triángulo viene dado por:

$g = \frac{1}{3}(a + b + c)$
"""

import sympy
from sympy import *
init_printing(use_unicode=True)

"""###Cálculo del centroide"""

# ESCRIBIR AQUÍ LOS VECTORES POSICIÓN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

a = Matrix([1, 2])
b = Matrix([0, 1])
c = Matrix([0, 3])

#Para que los vectores posición formen los vertices de un triángulo, por lo menos uno de ellos debe ser linealmente independiente
#con respecto a los otros dos

M = Matrix([[a.T], [b.T], [c.T]])
rank = M.rank()

if rank < 2:
    print("\033[1;31m\033[4;31mERROR\033[0;31m: Los vectores \033[1;31mNO \033[0;31mforman un triángulo!\n \033[0;0mAntes de continuar ingrese 3 vectores que NO sean colineales")
    G = "NaN"
else:
    print("Los vectores sí forman un triángulo\n\nCentroide:")
    #Cálculo del centroide:
    G = (a + b + c)/3
G

"""###Representación gráfica del triángulo"""

#Representación gráfica del triángulo

import matplotlib.pyplot as plt

#transformo las matrices en listas para poder trabajar con matplotlib
A = [ float(a[0]), float(a[1]) ]
B = [ float(b[0]), float(b[1]) ]
C = [ float(c[0]), float(c[1]) ]

#defino las coordenadas de los vertices del triangulo
xcords = [ A[0], B[0], C[0] ]
ycords = [ A[1], B[1], C[1] ]

#defino los segmentos del triángulo haciendo las retas de vectores respectivas
AB = [ B[0]-A[0] , B[1]-A[1] ]
BC = [ C[0]-B[0] , C[1]-B[1] ]
CA = [ A[0]-C[0] , A[1]-C[1] ]

#grafico los vectores corresponientes a los segmentos del triángulo
plt.plot(xcords, ycords, "ro")
plt.arrow(A[0], A[1], AB[0], AB[1], head_width=0, head_length=0, fc='r', ec='r')
plt.arrow(B[0], B[1], BC[0], BC[1], head_width=0, head_length=0, fc='b', ec='b')
plt.arrow(C[0], C[1], CA[0], CA[1], head_width=0, head_length=0, fc='y', ec='y')
plt.plot(G[0], G[1], "g*", label="Centroide")
plt.legend()
plt.show()

"""#Problema 6 sección 1.2.7

Operaciones con los vectores:

$
a = \hat{e}_1 + 2\hat{e}_2 + 3\hat{e}_3\\
b = 4\hat{e}_1 + 5\hat{e}_2 + 6\hat{e}_3\\
c= 3\hat{e}_1 + 2\hat{e}_2 + \hat{e}_3\\
d = 6\hat{e}_1 + 5\hat{e}_2 + 4\hat{e}_3
$
"""

#Escribimos los vectores en simpy

import sympy
from sympy import *

a = Matrix([1, 2, 3])
b = Matrix([4, 5, 6])
c = Matrix([3, 2, 1])
d = Matrix([6, 5, 4])

"""###Punto (a): sumas"""

a+b+c+d

a+b-c-d

a-b+c-d

-a+b-c+d

"""###Punto (b): ángulos"""

#Vectores base:
e1 = Matrix([1, 0, 0])
e2 = Matrix([0, 1, 0])
e3 = Matrix([0, 0, 1])

#función para calcular ángulos

def angulo(v, e):
    alpha = acos(v.dot(e)/(v.norm()*e.norm()))
    alpha = (alpha*180/pi).round(2)
    return alpha

print("Ángulo (en grados) entre:\n")

print("a y e1: ", angulo(a,e1),)
print("a y e2: ", angulo(a,e2))
print("a y e3: ", angulo(a,e3))

print("\nb y e1: ", angulo(b,e1))
print("b y e2: ", angulo(b,e2))
print("b y e3: ", angulo(b,e3))

print("\nc y e1: ", angulo(c,e1))
print("c y e2: ", angulo(c,e2))
print("c y e3: ", angulo(c,e3))

"""###Punto (c): magnitudes"""

#Magnitud de a
a.norm()

#Magnitud de b
b.norm()

#MAgnitud de c
c.norm()

"""###Punto (d): más ángulos"""

#ángulo entre a y b
angulo(a,b)

#ángulo entre c y d
angulo(c,d)

"""###Punto (e): proyección"""

#Proyección de a sobre b
(a.dot(b)/b.norm()*b/b.norm()).T #lo traspuse para que se visualice mejor

"""###Punto (f): vectores coplanares?"""

#a, b, c y d son coplanares si solo dos de ellos son linealmente independientes

M = Matrix([[a, b, c, d]])

M.rank()

"""El rank de la matriz generada por a, b, c y d es 2, por lo tanto, hay dos vectores linealmente independientes. Entonces sí son coplanares

###Punto (g): sumas con productos escalares
"""

(a+b).dot(c+d)

"""###Punto (h): productos vectoriales"""

a.cross(b)

b.cross(c)

c.cross(d)

print("Ángulos (en grados) entre:\n")
print("(a x b) y d:", angulo(a.cross(b), d))
print("(b x c) y d:", angulo(b.cross(c), d))
print("(c x d) y d:", angulo(c.cross(d), d))

"""###Punto (i): triple producto escalar"""

c.dot(a.cross(b))

